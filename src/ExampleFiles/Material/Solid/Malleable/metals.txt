//machine,
//itemInputs[] | liquidInputs[] | itemOutputs[] | liquidOutputs[],
//int baseRecipesPerOperation, int[] outputMultipliers[16], int priority,
//int chemAmount, int dataAmount, int matterInAmount, int matterOutAmount
//baseRecipesPerOperation is non-zero
//outputMultipliers must be size 16, non-zero
//optional (some I/O is required): String input(i1; i2), String output(o1; o2), String lInput(l1; l2), String lOutput(g1; g2)
//put a - to indicate no IO
//for IO: by default the oredict key is used, to use the actual item, put an @ sign before the registry name
//chance%@registryName*amount
//chance%partName*amount
//parts
//create a chiselable item that can indicate the recipe for the same item inputs
//use $ before the machine's name to use a MachineGroup instead
//int minVoltage, double powerMultiplierIn, double powerMultiplierOut,
//int baseTime, double[] tickDecMultipliers[16-minVoltage+1],
//dataTypeOutput, (-/+)matterInType, (-/+)matterOutType
//material, addSmelt, addMachine, addBlast, addConductive
//add @ to do part overrides for any materialData, then add the material,
//use a - for no tickDecreaseMultipliers (if minVoltage is 16), also for no IO
//followed by repeating syntax for each part added: materialPart>modid:itemRegistry;..., other parameters
//ex1: 1, 1, 0, 20, 0.05;0.05;0.05;0.05;0.05;0.05;0.05;0.05;0.05;0.05;0.05;0.052;0.054;0.055;0.06, data, -red, +orange, @iron;ingot>minecraft:iron_ingot:0;nugget>minecraft:iron_nugget:0, true, true, true, true
//ex2: 16, 1, 0, 20, -, data, -green, -magenta, nickel, true, true, true, true